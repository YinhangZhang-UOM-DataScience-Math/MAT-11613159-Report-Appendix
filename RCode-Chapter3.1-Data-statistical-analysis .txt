#This file contains all the R code for tables and figures in Section 3.1: Data and Statistical Analysis. 
#After modifying the dataset file path, it can be directly copied and pasted into R to reproduce the results.

# !!! IMPORTANT REMINDER !!! 
# !!! IMPORTANT REMINDER !!! 
# !!! IMPORTANT REMINDER !!! 
# Before running this code, make sure to modify the input dataset path in the 1. Read CSV and rename columns



# —— 0. Install and load required packages —— #
install.packages(c("TTR","e1071","dplyr","zoo","xts","knitr","ggplot2","patchwork","gridExtra","tseries","tidyr"))
library(TTR); library(e1071); library(dplyr); library(zoo)
library(xts); library(knitr); library(ggplot2); library(patchwork)
library(gridExtra); library(tseries); library(tidyr)

# —— 1. Read CSV and rename columns —— #
# !!! IMPORTANT REMINDER !!! 
# !!! IMPORTANT REMINDER !!! 
# !!! IMPORTANT REMINDER !!! 
#Modify "C:/Users/ZhangYinhang/ES_F_data.csv"  to your save path in the below


df <- read.csv("C:/Users/ZhangYinhang/ES_F_data.csv",
               stringsAsFactors = FALSE) %>%
  mutate(date = as.Date(Date)) %>%
  select(
    date,
    Open   = Open_ES.F,
    High   = High_ES.F,
    Low    = Low_ES.F,
    Close  = Close_ES.F,
    Volume = Volume_ES.F
  )

# —— 2. Compute log returns and absolute returns —— #
df <- df %>%
  arrange(date) %>%
  mutate(
    log_ret = c(NA, diff(log(Close))),
    abs_ret = abs(log_ret)
  )

# —— 3. Convert to xts and compute 14-day ATR —— #
df_xts <- xts(df[, c("High","Low","Close")], order.by = df$date)
atr_m   <- ATR(df_xts, n = 14)
df$atr  <- coredata(atr_m[, "atr"])

# —— 4. Compute 20-day rolling volatility —— #
df$vol <- rollapply(df$log_ret, width = 20, FUN = sd, fill = NA, align = "right")

# —— 5. Descriptive statistics table —— #
vars <- list(
  `Absolute Log Return` = df$abs_ret,
  `ATR (14-day)`        = df$atr,
  `Volatility (20-day)` = df$vol
)

summarize_series <- function(x) {
  x <- na.omit(x)
  c(
    `sample size` = length(x),
    Mean          = mean(x),
    `S.D.`        = sd(x),
    Min           = min(x),
    Max           = max(x),
    Skewness      = skewness(x),
    Kurtosis      = kurtosis(x)
  )
}

stat_tbl <- sapply(vars, summarize_series) %>%
  t() %>%
  as.data.frame() %>%
  select(`sample size`, Mean, `S.D.`, Min, Max, Skewness, Kurtosis) %>%
  mutate_if(is.numeric, ~ round(., 3))

kable(stat_tbl, caption = "Table X: Descriptive statistics for absolute log returns, ATR, and volatility")

# —— 6. Plot Close price, returns, ATR, volatility —— #
p1 <- ggplot(df, aes(x = date, y = Close)) +
  geom_line() + labs(title = "Price Series", y="Close Price") + theme_minimal()

p2 <- ggplot(df, aes(x = date, y = log_ret)) +
  geom_line() + labs(title = "Log Returns", y="Log Return") + theme_minimal()

p3 <- ggplot(df, aes(x = date, y = abs_ret)) +
  geom_line() + labs(title = "Absolute Log Returns", y="Absolute Log Return") + theme_minimal()

p4 <- ggplot(df, aes(x = date, y = atr)) +
  geom_line() + labs(title = "ATR (14-day)", y="ATR") + theme_minimal()

p5 <- ggplot(df, aes(x = date, y = vol)) +
  geom_line() + labs(title = "Volatility (20-day)", y="Volatility") + theme_minimal()

plots <- list(p1,p2,p3,p4,p5)
for (plt in plots) {
  dev.new()   # Open new graphics window
  print(plt)
}

# —— 7. Distribution & Q-Q plots —— #
series_list <- list(
  `Log Returns` = na.omit(df$log_ret),
  `Absolute Log Returns` = na.omit(df$abs_ret),
  `ATR (14-day)` = na.omit(df$atr),
  `Volatility (20-day)` = na.omit(df$vol)
)

# Each series in a separate window
for(name in names(series_list)) {
  x <- series_list[[name]]
  dev.new()
  p_hist <- ggplot(data.frame(x=x), aes(x)) +
    geom_histogram(bins=50, fill="grey80", color="black") +
    labs(title=paste(name, "Histogram"), x=name, y="Frequency") + theme_minimal()
  p_qq <- ggplot(data.frame(x=x), aes(sample=x)) +
    stat_qq(shape=1) + stat_qq_line() +
    labs(title=paste(name, "Q-Q Plot")) + theme_minimal()
  grid.arrange(p_hist, p_qq, ncol=2)
}

# —— 8. Unit root tests (ADF and KPSS) —— #
res <- lapply(names(series_list), function(name) {
  x <- series_list[[name]]
  adf_p <- adf.test(x)$p.value
  kpss_p <- kpss.test(x, null="Level")$p.value
  data.frame(Series=name, Test=c("ADF","KPSS"), PValue=c(adf_p,kpss_p), stringsAsFactors = FALSE)
}) %>% bind_rows()

res <- res %>% mutate(Series=factor(Series, levels=names(series_list)),
                      Test=factor(Test, levels=c("ADF","KPSS")))

p_adf_kpss <- ggplot(res, aes(x=Test, y=PValue, fill=Test)) +
  geom_col(width=0.6, show.legend=FALSE) +
  geom_hline(yintercept = 0.05, linetype="dashed", color="red") +
  facet_wrap(~ Series, ncol=2) +
  scale_y_continuous(limits=c(0,1)) +
  labs(title="ADF and KPSS p-values", subtitle="Dashed line at p=0.05", x=NULL, y="p-value") +
  theme_minimal(base_size=14) +
  theme(strip.text=element_text(face="bold"), panel.grid.major.x=element_blank())

dev.new()
print(p_adf_kpss)
ggsave("Figure_4.3_ADF_KPSS.png", p_adf_kpss, width=10, height=8, dpi=300)

# —— 9. ACF & PACF plots —— #
for(name in names(series_list)) {
  x <- series_list[[name]]
  dev.new()
  par(mfrow=c(2,1))
  acf(x, main=paste("ACF of", name))
  pacf(x, main=paste("PACF of", name))
  par(mfrow=c(1,1))
}
