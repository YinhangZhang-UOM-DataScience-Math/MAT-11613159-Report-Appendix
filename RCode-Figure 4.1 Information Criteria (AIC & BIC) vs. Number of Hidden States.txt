#This file contains all the R code for Figure 4.1 in Section 4.1.2: Model fftting and selection of state numbers.
#After modifying the dataset file path, it can be directly copied and pasted into R to reproduce the results.

# !!! IMPORTANT REMINDER !!! 
# !!! IMPORTANT REMINDER !!! 
# !!! IMPORTANT REMINDER !!! 
# Before running this code, make sure to modify the input dataset path in the  2. Load CSV data and compute log returns




# =====================================================
# 1. Install and load required packages
# =====================================================
if (!requireNamespace("depmixS4", quietly = TRUE)) {
  install.packages("depmixS4")
}
library(depmixS4)

if (!requireNamespace("ggplot2", quietly = TRUE)) {
  install.packages("ggplot2")
}
library(ggplot2)

if (!requireNamespace("patchwork", quietly = TRUE)) {
  install.packages("patchwork")
}
library(patchwork)

if (!requireNamespace("dplyr", quietly = TRUE)) {
  install.packages("dplyr")
}
library(dplyr)  # for arrange function, optional

# 2. Load CSV data and compute log returns

# !!! IMPORTANT REMINDER !!! 
# !!! IMPORTANT REMINDER !!! 
# !!! IMPORTANT REMINDER !!! 
#Modify "C:/Users/ZhangYinhang/ES_F_data.csv"  to your save path in the below




df <- read.csv("C:/Users/ZhangYinhang/ES_F_data.csv", stringsAsFactors = FALSE)

# Convert Date column to Date type and rename Close column
df$date  <- as.Date(df$Date)
df$Close <- df$Close_ES.F

# Sort by date
df <- df[order(df$date), ]

# Compute log returns
df$log_ret <- c(NA, diff(log(df$Close)))

# Remove NA at the first row
obs <- df$log_ret[!is.na(df$log_ret)]
data_hmm <- data.frame(obs = obs)

# =====================================================
# 3. Fit Gaussian HMMs with 2 to 4 states
# =====================================================
fits <- list()
for (K in 2:4) {
  mod <- depmix(obs ~ 1,
                family  = gaussian(),
                nstates = K,
                data    = data_hmm)
  set.seed(123)  # for reproducibility
  fits[[as.character(K)]] <- fit(mod, verbose = FALSE)
}

# =====================================================
# 4. Extract log-likelihood, AIC, and BIC
# =====================================================
IC <- data.frame(
  K      = 2:4,
  logLik = sapply(fits, logLik),
  AIC    = sapply(fits, AIC),
  BIC    = sapply(fits, BIC)
)

# =====================================================
# 5. Plot AIC and BIC
# =====================================================

# 5.1 AIC plot
p_aic <- ggplot(IC, aes(x = K, y = AIC)) +
  geom_line(color = "#0072B2", size = 1) +
  geom_point(color = "#0072B2", size = 2) +
  scale_x_continuous(breaks = IC$K) +
  labs(title = "AIC vs. Number of States",
       x = "Number of States (K)",
       y = "AIC") +
  theme_minimal(base_size = 14)

# 5.2 BIC plot
p_bic <- ggplot(IC, aes(x = K, y = BIC)) +
  geom_line(color = "#D55E00", size = 1) +
  geom_point(color = "#D55E00", size = 2) +
  scale_x_continuous(breaks = IC$K) +
  labs(title = "BIC vs. Number of States",
       x = "Number of States (K)",
       y = "BIC") +
  theme_minimal(base_size = 14)

# 5.3 Combined plot of AIC and BIC
p_both <- ggplot(IC, aes(x = K)) +
  geom_line(aes(y = AIC, color = "AIC"), size = 1) +
  geom_point(aes(y = AIC, color = "AIC"), size = 2) +
  geom_line(aes(y = BIC, color = "BIC"), size = 1) +
  geom_point(aes(y = BIC, color = "BIC"), size = 2) +
  scale_x_continuous(breaks = IC$K) +
  scale_color_manual(values = c(AIC = "#0072B2", BIC = "#D55E00")) +
  labs(title = "AIC and BIC vs. Number of States",
       x = "Number of States (K)",
       y = "Information Criterion",
       color = "") +
  theme_minimal(base_size = 14)

# =====================================================
# 6. Display plots in separate windows
# =====================================================
dev.new(); print(p_aic)
dev.new(); print(p_bic)
dev.new(); print(p_both)

# =====================================================
# 7. Combine the three plots vertically and display
# =====================================================
combined <- p_aic / p_bic / p_both
dev.new(); print(combined)
